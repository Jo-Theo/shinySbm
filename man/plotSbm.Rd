% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_plotSbm.R
\name{plotSbm}
\alias{plotSbm}
\title{plotSbm}
\usage{
plotSbm(
  fit,
  ordered = FALSE,
  transpose = FALSE,
  labels = NULL,
  plotOptions = list()
)
}
\arguments{
\item{fit}{: Sbm model of class `BipartiteSBM_fit`, `SimpleSBM_fit` or simple numeric `matrix`.}

\item{ordered}{: Boolean. Set \code{TRUE} if the matrix should be reordered (Default is \code{FALSE})}

\item{transpose}{: Boolean. Set \code{TRUE} if you want to invert columns and rows to flatten a long matrix (Default is \code{FALSE})}

\item{labels}{: a named list (names should be : `"col"` and `"row"`) of characters describing columns and rows component (Default is \code{NULL})}

\item{plotOptions}{: a list providing options. See details below.}
}
\value{
a ggplot object corresponding to the plot
}
\description{
A fct that plot a beautiful matrix from an sbm object or a network matrix it does
have suitable parameters to get the plots you want this is the generic function,
it does have one method Bipartite and one for Simple Sbm. The `fit` object need
to be construct by one of the `estimate***SBM` function from the `sbm` package.
}
\details{
The list of parameters \code{plotOptions} for the matrix plot is
\itemize{
 \item{"showValues": }{Boolean. Set TRUE if you want to see the real values. Default value is TRUE}
 \item{"showPredictions": }{Boolean. Set TRUE if you want to see the predicted values. Default value is TRUE}
 \item{"title": }{Title in characters. Will be printed at the bottom of the matrix. Default value is NULL}
 \item{"colPred": }{Color of the predicted values, the small values will be more transparent. Default value is "red"}
 \item{"colValue": }{Color of the real values, the small values will close to white. Default value is "black"}
}
}
\examples{
data_bi <- sbm::fungusTreeNetwork$fungus_tree
my_sbm_bi <- sbm::estimateBipartiteSBM(data_bi)
plotSbm(my_sbm_bi,
  ordered = TRUE, transpose = TRUE,
  plotOptions = list(title = "An example Matrix")
)

data_uni <- sbm::fungusTreeNetwork$tree_tree
my_sbm_uni <- sbm::estimateSimpleSBM(data_uni,model = "poisson")
plotSbm(my_sbm_uni, ordered = TRUE,
  plotOptions = list(title = "An example Matrix")
)

n_col <- 100
n_row <- 90
mat <- matrix(sample(0:10,n_col*n_row,replace = TRUE),n_col,n_row)
plotSbm(mat, transpose = TRUE ,
  labels = list(col = "Columns",row = 'Rows'),
  plotOptions = list(colValue = 'blue')
  )

}
